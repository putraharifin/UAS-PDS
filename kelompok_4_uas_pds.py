# -*- coding: utf-8 -*-
"""Kelompok 4_UAS_PDS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14BZ3B5KNGMi-YNmsc3B-YxP3F3zvAxMR

# UAS - Laboratorium PDS
Disini, kalian akan mengimplementasikan semua ilmu yang telah kalian dapat selama laboratorium dilaksanakan!

ANGGOTA :

1. Nazrul Fajar Ramadhani | 221401117
2. Muhammad Fadlur Rahman Al-Mubarok Khan | 221401107
3. Muhammad Putra Harifin Pane | 221401072
4. Rizky Karina Berutu |221401124
5. Muhammad Rico Prasetyo | 221401114
6. Rafhael Remco Marchelino Sumbayak | 221401121

## Import Library
Panggil Library yang kalian butuhkan disini.
"""

# Panggil Library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
!pip install fitter
from statsmodels.sandbox.stats.runs import runstest_1samp
import scipy.stats as sp
import statsmodels.api as sm
from fitter import Fitter
from scipy.stats import pearsonr
import statsmodels.formula.api as smf
import statsmodels.stats.api as sms
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.compat import lzip

"""## Load Dataset
Masukkan dataset kalian kedalam program disini.
"""

# Panggil Dataset kedalam program
df1 = pd.read_excel('/content/all-weeks-countries.csv')
df2 = pd.read_excel('/content/all-weeks-countries.csv')
df3 = pd.read_excel('/content/all-weeks-countries.csv')
df4 = pd.read_excel('/content/all-weeks-countries.csv')
df5 = pd.read_excel('/content/all-weeks-countries.csv')

"""## Data Preprocessing

Tangani data kalian terlebih dahulu.

### Data Wrangling - (NAZRUL FAJAR RAMADHANI)

Ubahlah data anda kedalam bentuk yang lebih masuk akal. Contohnya adalah :
* Mengubah index atau label baris tabel
* Agregasi data
* Menggabungkan beberapa dataset menjadi satu
* Mengatur ulang bagaimana data disajikan dalam tabel
* Mengurutkan data dengan baik dan benar
* Menyaring data sesuai kebutuhan
"""

# Contoh Data Mentah
df1

# Jelaskan tahapan yang kalian lakukan disini
# Data 1
# Menghapus kolom yang tidak diperlukan
hapus1 = list(range(0, 7)) + list(range(39, 55))
df1 = df1.drop(index=hapus1).reset_index(drop=True)
# Mengubah Baris menjadi kolom
df1 = df1.set_axis(df1.iloc[0], axis=1).drop(df1.index[0])

# Data 2
# Menghapus kolom yang tidak diperlukan
hapus2 = list(range(0, 7)) + list(range(36, 52))
df2 = df2.drop(index=hapus2).reset_index(drop=True)
# Mengubah Baris menjadi kolom
df2 = df2.set_axis(df2.iloc[0], axis=1).drop(df2.index[0])

# Data 3
# Menghapus kolom yang tidak diperlukan
hapus3 = list(range(0, 7)) + list(range(39, 55))
df3 = df3.drop(index=hapus3).reset_index(drop=True)
# Mengubah Baris menjadi kolom
df3 = df3.set_axis(df3.iloc[0], axis=1).drop(df3.index[0])

# Data 4
# Menghapus kolom yang tidak diperlukan
hapus4 = list(range(0, 7)) + list(range(38, 54))
df4 = df4.drop(index=hapus4).reset_index(drop=True)
# Mengubah Baris menjadi kolom
df4 = df4.set_axis(df4.iloc[0], axis=1).drop(df4.index[0])

# Data 5
# Menghapus kolom yang tidak diperlukan
hapus5 = list(range(0, 7)) + list(range(23, 39))
df5 = df5.drop(index=hapus5).reset_index(drop=True)
# Mengubah Baris menjadi kolom
df5 = df5.set_axis(df5.iloc[0], axis=1).drop(df5.index[0])

# Menggabungkan Data - Data yang sudah diproses menjadi 1
df = pd.concat([df1, df2, df3, df4, df5], ignore_index=True)
# Mengubah Nama Kolom Agar Lebih Mudah Dikenali
df = df.rename(columns={'Tn': 'Temperatur minimum (°C)','Tx': 'Temperatur maksimum (°C)',
                         'Tavg': 'Temperatur rata-rata (°C)','RH_avg': 'Kelembapan rata-rata (%)',
                         'RR': 'Curah hujan (mm)','ss': 'Lamanya penyinaran matahari (jam)',
                         'ff_x': 'Kecepatan angin maksimum (m/s)','ddd_x': 'Arah angin saat kecepatan maksimum (°)',
                         'ff_avg': 'Kecepatan angin rata-rata (m/s)', 'ddd_car': 'Arah angin terbanyak (°)'})

# Mengubah tipe data kolom tanggal menjadi datetime agar data dapat di urutkan
df['Tanggal'] = pd.to_datetime(df.Tanggal)
df['Tanggal'] = df['Tanggal'].dt.strftime('%d-%m-%y')
df['Tanggal'] = pd.to_datetime(df.Tanggal)

# Mengurutkan Data sesuai tanggal
df.sort_values('Tanggal', inplace=True)

#Hasil Data setelang di Wrangling
df

"""### Data Cleansing - (M.FAZLUR RAHMAN AL MUBAROK)

- Hapus semua baris duplikat!
- Pastikan untuk data yang numerik, bahwa outlier sudah dibersihkan! Gunakan
metode IQR.
- Jika ada kolom kosong, isi dengan data yang tepat! Apakah dengan mean,
median, atau modus?
"""

# Bersihkan data anda, jangan lupa jelaskan langkah yang anda lakukan

# Memastikan data yang duplikat dan tidak ada baris yang duplikat
df.duplicated()

df.duplicated().sum()

# Mengelompokkan data berdasarkan Tanggal pada kolom kelembapan rata-rata
df_Date = df[['Kelembapan rata-rata (%)','Tanggal']].groupby(['Tanggal']).sum()
df_Date

# Memastikan outlier dengan melihat grafik
sns.scatterplot(data=df_Date, x="Tanggal", y="Kelembapan rata-rata (%)")
plt.show()

# Menghitung jarak antar kuartil
Q1 = np.quantile(df_Date['Kelembapan rata-rata (%)'], 0.25)
Q3 = np.quantile(df_Date['Kelembapan rata-rata (%)'], 0.75)

# Menghitung jarak antar kuartil (IQR)
IQR = Q3 - Q1

# Menghitung batas bawah dan batas atas
batas_Bawah = Q1 - (1.5*IQR)
batas_Atas = Q3 + (1.5*IQR)

# Membuat Status outlier
for i in df_Date['Kelembapan rata-rata (%)']:
  if (i > (batas_Atas) or i < (batas_Bawah)):
    df_Date['Outlier_Status'] = 1
  else:
    df_Date['Outlier_Status'] = 0

# Menampilkan dataframe yang telah ditambahkan kolom outlier
df_Date

df_Date['Outlier_Status'].sum()

# Cek normalitas dengan grafik
sp.probplot(df_Date['Kelembapan rata-rata (%)'], plot=plt)
plt.show()

#Cek normalitas dengan menggunakan tes statistik
pVals = pd.DataFrame(index = ['Test Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df_Date['Kelembapan rata-rata (%)'])

# Shapiro-Wilktest
pVals['Shapiro-Wilk'] = sp.shapiro(df_Date['Kelembapan rata-rata (%)'])

#Kolmogorov-Smirnov
pVals['Kolmogorov-Smirnov'] = sp.kstest((df_Date['Kelembapan rata-rata (%)']-np.mean(df_Date['Kelembapan rata-rata (%)']))/np.std(df_Date['Kelembapan rata-rata (%)'],ddof=1), 'norm')
pVals

# Mengelompokkan data berdasarkan Tanggal pada kolom curah hujan
df_Date = df[['Curah hujan (mm)','Tanggal']].groupby(['Tanggal']).sum()
df_Date

# Memastikan outlier dengan melihat grafik
sns.scatterplot(data=df_Date, x="Tanggal", y="Curah hujan (mm)")
plt.show()

# Menghitung jarak antar kuartil
Q1 = np.quantile(df_Date['Curah hujan (mm)'], 0.25)
Q3 = np.quantile(df_Date['Curah hujan (mm)'], 0.75)

# Menghitung jarak antar kuartil (IQR)
IQR = Q3 - Q1

# Menghitung batas bawah dan batas atas
batas_Bawah = Q1 - (1.5*IQR)
batas_Atas = Q3 + (1.5*IQR)

# Membuat Status outlier
for i in df_Date['Curah hujan (mm)']:
  if (i > (batas_Atas) or i < (batas_Bawah)):
    df_Date['Outlier_Status'] = 1
  else:
    df_Date['Outlier_Status'] = 0

# Menampilkan dataframe yang telah ditambahkan kolom outlier
df_Date

df_Date['Outlier_Status'].sum()

# cek normalitas dengan grafik
sp.probplot(df_Date['Curah hujan (mm)'], plot=plt)
plt.show()

#Cek normalitas dengan menggunakan tes statistik
pVals = pd.DataFrame(index = ['Test Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df_Date['Curah hujan (mm)'])

# Shapiro-Wilktest
pVals['Shapiro-Wilk'] = sp.shapiro(df_Date['Curah hujan (mm)'])

#Kolmogorov-Smirnov
pVals['Kolmogorov-Smirnov'] = sp.kstest((df_Date['Curah hujan (mm)']-np.mean(df_Date['Curah hujan (mm)']))/np.std(df_Date['Curah hujan (mm)'],ddof=1), 'norm')
pVals

# Mengelompokkan data berdasarkan Tanggal pada kolom Kecepatan angin maksimum (m/s)
df_Date = df[['Kecepatan angin maksimum (m/s)','Tanggal']].groupby(['Tanggal']).sum()
df_Date

# Memastikan outlier dengan melihat grafik
sns.scatterplot(data=df_Date, x="Tanggal", y="Kecepatan angin maksimum (m/s)")
plt.show()

# Menghitung jarak antar kuartil
Q1 = np.quantile(df_Date['Kecepatan angin maksimum (m/s)'], 0.25)
Q3 = np.quantile(df_Date['Kecepatan angin maksimum (m/s)'], 0.75)

# Menghitung jarak antar kuartil (IQR)
IQR = Q3 - Q1

# Menghitung batas bawah dan batas atas
batas_Bawah = Q1 - (1.5*IQR)
batas_Atas = Q3 + (1.5*IQR)

# Membuat Status outlier
for i in df_Date['Kecepatan angin maksimum (m/s)']:
  if (i > (batas_Atas) or i < (batas_Bawah)):
    df_Date['Outlier_Status'] = 1
  else:
    df_Date['Outlier_Status'] = 0

# Menampilkan dataframe yang telah ditambahkan kolom outlier
df_Date

df_Date['Outlier_Status'].sum()

# cek normalitas dengan grafik
sp.probplot(df_Date['Kecepatan angin maksimum (m/s)'], plot=plt)
plt.show()

#Cek normalitas dengan menggunakan tes statistik
pVals = pd.DataFrame(index = ['Test Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df_Date['Kecepatan angin maksimum (m/s)'])

# Shapiro-Wilktest
pVals['Shapiro-Wilk'] = sp.shapiro(df_Date['Kecepatan angin maksimum (m/s)'])

#Kolmogorov-Smirnov
pVals['Kolmogorov-Smirnov'] = sp.kstest((df_Date['Kecepatan angin maksimum (m/s)']-np.mean(df_Date['Kecepatan angin maksimum (m/s)']))/np.std(df_Date['Kecepatan angin maksimum (m/s)'],ddof=1), 'norm')
pVals

# Mengelompokkan data berdasarkan Tanggal pada kolom Arah angin saat kecepatan maksimum (°)
df_Date = df[['Arah angin saat kecepatan maksimum (°)','Tanggal']].groupby(['Tanggal']).sum()
df_Date

# Memastikan outlier dengan melihat grafik
sns.scatterplot(data=df_Date, x="Tanggal", y="Arah angin saat kecepatan maksimum (°)")
plt.show()

# Menghitung jarak antar kuartil
Q1 = np.quantile(df_Date['Arah angin saat kecepatan maksimum (°)'], 0.25)
Q3 = np.quantile(df_Date['Arah angin saat kecepatan maksimum (°)'], 0.75)

# Menghitung jarak antar kuartil (IQR)
IQR = Q3 - Q1

# Menghitung batas bawah dan batas atas
batas_Bawah = Q1 - (1.5*IQR)
batas_Atas = Q3 + (1.5*IQR)

# Membuat Status outlier
for i in df_Date['Arah angin saat kecepatan maksimum (°)']:
  if (i > (batas_Atas) or i < (batas_Bawah)):
    df_Date['Outlier_Status'] = 1
  else:
    df_Date['Outlier_Status'] = 0

# Menampilkan dataframe yang telah ditambahkan kolom outlier
df_Date

df_Date['Outlier_Status'].sum()

# cek normalitas dengan grafik
sp.probplot(df_Date['Arah angin saat kecepatan maksimum (°)'], plot=plt)
plt.show()

#Cek normalitas dengan menggunakan tes statistik
pVals = pd.DataFrame(index = ['Test Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df_Date['Arah angin saat kecepatan maksimum (°)'])

# Shapiro-Wilktest
pVals['Shapiro-Wilk'] = sp.shapiro(df_Date['Arah angin saat kecepatan maksimum (°)'])

#Kolmogorov-Smirnov
pVals['Kolmogorov-Smirnov'] = sp.kstest((df_Date['Arah angin saat kecepatan maksimum (°)']-np.mean(df_Date['Arah angin saat kecepatan maksimum (°)']))/np.std(df_Date['Arah angin saat kecepatan maksimum (°)'],ddof=1), 'norm')
pVals

# Mengelompokkan data berdasarkan Tanggal pada kolom Kecepatan angin rata-rata (m/s)
df_Date = df[['Kecepatan angin rata-rata (m/s)','Tanggal']].groupby(['Tanggal']).sum()
df_Date

# Memastikan outlier dengan melihat grafik
sns.scatterplot(data=df_Date, x="Tanggal", y="Kecepatan angin rata-rata (m/s)")
plt.show()

# Menghitung jarak antar kuartil
Q1 = np.quantile(df_Date['Kecepatan angin rata-rata (m/s)'], 0.25)
Q3 = np.quantile(df_Date['Kecepatan angin rata-rata (m/s)'], 0.75)

# Menghitung jarak antar kuartil (IQR)
IQR = Q3 - Q1

# Menghitung batas bawah dan batas atas
batas_Bawah = Q1 - (1.5*IQR)
batas_Atas = Q3 + (1.5*IQR)

# Membuat Status outlier
for i in df_Date['Kecepatan angin rata-rata (m/s)']:
  if (i > (batas_Atas) or i < (batas_Bawah)):
    df_Date['Outlier_Status'] = 1
  else:
    df_Date['Outlier_Status'] = 0

# Menampilkan dataframe yang telah ditambahkan kolom outlier
df_Date

df_Date['Outlier_Status'].sum()

#cek normalitas dengan grafik
sp.probplot(df_Date['Kecepatan angin rata-rata (m/s)'], plot=plt)
plt.show()

#Cek normalitas dengan menggunakan tes statistik
pVals = pd.DataFrame(index = ['Test Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df_Date['Kecepatan angin rata-rata (m/s)'])

# Shapiro-Wilktest
pVals['Shapiro-Wilk'] = sp.shapiro(df_Date['Kecepatan angin rata-rata (m/s)'])

#Kolmogorov-Smirnov
pVals['Kolmogorov-Smirnov'] = sp.kstest((df_Date['Kecepatan angin rata-rata (m/s)']-np.mean(df_Date['Kecepatan angin rata-rata (m/s)']))/np.std(df_Date['Kecepatan angin rata-rata (m/s)'],ddof=1), 'norm')
pVals

# Melihat kolom yang kosong
df.isnull()

# Melihat kolom yang kosong dengan menjumlahkan nya
df.isnull().sum()

# Mengganti kolom kosong temperatur minimum dengan mean
df['Temperatur minimum (°C)'] = df['Temperatur minimum (°C)'].fillna(df['Temperatur minimum (°C)'].mean())
df['Temperatur minimum (°C)']

# Mengganti kolom kosong curah hujan dengan median
df['Curah hujan (mm)'] = df['Curah hujan (mm)'].fillna(df['Curah hujan (mm)'].median())
df['Curah hujan (mm)']

df.loc[df['Curah hujan (mm)'] == 8888.0, 'Curah hujan (mm)'] = df['Curah hujan (mm)'].median()
df['Curah hujan (mm)']

# Mengganti kolom kosong lamanya penyinaran matahari dengan mean
df['Lamanya penyinaran matahari (jam)'] = df['Lamanya penyinaran matahari (jam)'].fillna(df['Lamanya penyinaran matahari (jam)'].mean())
df['Lamanya penyinaran matahari (jam)']

"""### Data Validation - (M.FAZLUR RAHMAN AL MUBAROK)

- Pastikan tipe data tiap kolom sudah tepat.
- Pastikan semua nilai sudah masuk akal untuk tiap kolom. Gunakan operator
Python untuk memastikan hal tersebut!
"""

# Cek tipe data
df.info()
# Gunakan operator perbandingan untuk melakukan pengecekan

# Mengubah tipe data tiap kolom
df["Temperatur minimum (°C)"]=df["Temperatur minimum (°C)"].astype("float")
df["Temperatur maksimum (°C)"]=df["Temperatur maksimum (°C)"].astype("float")
df["Temperatur rata-rata (°C)"]=df["Temperatur rata-rata (°C)"].astype("float")
df["Kelembapan rata-rata (%)"]=df["Kelembapan rata-rata (%)"].astype("int")
df["Curah hujan (mm)"]=df["Curah hujan (mm)"].astype("float")
df["Lamanya penyinaran matahari (jam)"]=df["Lamanya penyinaran matahari (jam)"].astype("float")
df["Kecepatan angin maksimum (m/s)"]=df["Kecepatan angin maksimum (m/s)"].astype("int")
df["Arah angin saat kecepatan maksimum (°)"]=df["Arah angin saat kecepatan maksimum (°)"].astype("int")
df["Kecepatan angin rata-rata (m/s)"]=df["Kecepatan angin rata-rata (m/s)"].astype("int")
df["Arah angin terbanyak (°)"]=df["Arah angin terbanyak (°)"].astype("string")

# Cek kembali tipe data
df.info()

# Cek kembali kolom yang kosong
df.isnull()

# Cek kembali jumlah kolom yang kosong
df.isnull().sum()

df['Kelembapan rata-rata (%)'].unique()

df[['Kelembapan rata-rata (%)']].nunique()

df['Curah hujan (mm)'].unique()

df[['Curah hujan (mm)']].nunique()

df['Kecepatan angin maksimum (m/s)'].unique()

df[['Kecepatan angin maksimum (m/s)']].nunique()

df['Arah angin saat kecepatan maksimum (°)'].unique()

df[['Arah angin saat kecepatan maksimum (°)']].nunique()

df['Kecepatan angin rata-rata (m/s)'].unique()

df[['Kecepatan angin rata-rata (m/s)']].nunique()

df

"""## Exploratory Data Analysis

Dalami data kalian disini!

### Univariate Analysis - (Muhammad Putra Harifin Pane) (221401072)

- Penjelasan tipe variabel tiap kolom (Kategorikal/Numerikal, Nominal/Ordinal/Interval/Rasio),
- Analisis komposisi tiap variabel
- Apakah variabel tersebut tersebar secara acak?
- Bagaimana distribusinya untuk data kontinu? Bagaimana bentuk dan tipenya?
"""

#kolom Temperatur minimum (°C)
df[['Temperatur minimum (°C)']]

"""kolom Temperatur minimum (°C) berisi data kontinu berarti jenis data nya **numerikal**. termasuk dalam **interval** karena memiliki rentang atau ambang batas."""

#analisis komposisi tiap variabel
kolom_temperaturminimum = df['Temperatur minimum (°C)'].values

# Menampilkan isi kolom 'Temperatur minimum (°C)'
print(kolom_temperaturminimum)

# Contoh data suhu dalam bentuk desimal
data_temperaturMin = df['Temperatur minimum (°C)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['<22','22-23','23-24', '24-25', '25-26', '>26']
jumlah_data = [0, 0, 0, 0, 0, 0]

# Menghitung jumlah data dalam setiap kategori
for suhu in data_temperaturMin:
    if suhu < 22:
        jumlah_data[0] += 1
    elif 22 <= suhu < 23:
        jumlah_data[1] += 1
    elif 23 <= suhu < 24:
        jumlah_data[2] += 1
    elif 24 <= suhu < 25:
        jumlah_data[3] += 1
    elif 25 <= suhu < 26:
        jumlah_data[4] += 1
    else:
        jumlah_data[5] += 1

# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Temperatur minimum (°C)')
plt.show()

"""- setelah divisualisasikan dengan pie chart ternyata lebih dari 70% temperatur <= 25 °C"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Temperatur minimum (°C)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.bisa kita lihat bahwa nilai p-Value dibawah ambang batas. Jika nilai batas yang kita gunakan adalah 0.05, maka bisa kita simpulkan bahwa kita tidak punya cukup bukti untuk menolak hipotesa null, maka  data tidak tersusun secara acak."""

#distribusi untuk data kontinu
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Temperatur minimum (°C)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Temperatur minimum (°C)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Temperatur minimum (°C)']-
np.mean(df['Temperatur minimum (°C)']))/np.std(df['Temperatur minimum (°C)'],ddof=1), 'norm')

pVals

sns.histplot(df['Temperatur minimum (°C)']);

f = Fitter(df['Temperatur minimum (°C)'], distributions = ['norm','chi','f','t'])
f.fit()
f.summary()

"""kesimpulan distribusi kolom Temperatur minimum (°C) : setelah menguji dengan omnibus, shapiro dan KS ternyata terdapat perbedaan. omnibus dan shapiro menunjukkan hasil p value > 0,05, sedangkan KS menunjukkan hasil p value < 0,05, maka kesimpulan mengikuti 2 tes , omnibus dan shapiro dapat disimpulkan bahwa kolom temperatur minimum terdistribusi normal karena p- value > 0,05, selain itu omnibus juga mengikuti  skewness sama kurtosis sehingga lebih pas"""

#kolom Temperatur maksimum (°C)
df[['Temperatur maksimum (°C)']]

"""kolom Temperatur  maksimum (°C) berisi data kontinu berarti jenis data nya numerikal. termasuk dalam interval karena memiliki rentang atau ambang batas."""

# Mengakses kolom 'Temperatur maksimum (°C)'
kolom_temperaturmaksimum = df['Temperatur maksimum (°C)'].values

# Menampilkan isi kolom 'Temperatur maksimum (°C)'
print(kolom_temperaturmaksimum)

#analisis komposisi tiap variabel
data_temperaturmaks = df['Temperatur maksimum (°C)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['<31','31-32','32-33', '33-34', '34-35', '>36']
jumlah_data = [0, 0, 0, 0, 0, 0]

# Menghitung jumlah data dalam setiap kategori
for suhu in data_temperaturmaks:
    if suhu < 31:
        jumlah_data[0] += 1
    elif 31 <= suhu < 32:
        jumlah_data[1] += 1
    elif 32 <= suhu < 33:
        jumlah_data[2] += 1
    elif 33 <= suhu < 34:
        jumlah_data[3] += 1
    elif 34 <= suhu < 35:
        jumlah_data[4] += 1
    else:
        jumlah_data[5] += 1

# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Temperatur maksimum (°C)')
plt.show()

"""- setelah divisualisasikan dengan pie chart ternyata hasilnya variatif dan cenderung mendekati satu sama lain, tidak ada persentase yang kurang dari 10% dan range 32-33 menempati posisi tertinggi

"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Temperatur maksimum (°C)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.bisa kita lihat bahwa nilai p-Value adalah 0.004. Jika nilai batas yang kita gunakan adalah 0.05, maka bisa kita simpulkan bahwa kita tidak punya cukup bukti untuk menolak hipotesa null, maka data tidak tersusun secara acak"""

#distribusi untuk kolom temperature maksimum
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Temperatur maksimum (°C)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Temperatur maksimum (°C)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Temperatur maksimum (°C)']-
np.mean(df['Temperatur maksimum (°C)']))/np.std(df['Temperatur maksimum (°C)'],ddof=1), 'norm')

pVals

f = Fitter(df['Temperatur maksimum (°C)'], distributions = ['norm','chi','f','t'])
f.fit()
f.summary()

"""kesimpulan distribusi kolom Temperatur maksimum (°C) : setelah di uji dengan KS ternyata p-value > 0,05 maka kesimpulannya yaitu terdistribusi normal"""

#kolom Temperatur rata-rata (°C)
df[['Temperatur rata-rata (°C)']]

"""kolom Temperatur rata-rata (°C) berisi data kontinu berarti jenis data nya numerikal. termasuk dalam interval karena memiliki rentang atau ambang batas."""

# Mengakses kolom 'Temperatur rata-rata (°C)'
kolom_temperaturrata = df['Temperatur rata-rata (°C)'].values

# Menampilkan isi kolom 'Temperatur rata-rata (°C)'
print(kolom_temperaturrata)

#analisis komposis variabel kolom temperature rata-rata
data_temperaturrata = df['Temperatur rata-rata (°C)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['<26','26-27','27-28', '28-29', '29-30', '>30']
jumlah_data = [0, 0, 0, 0, 0, 0]

# Menghitung jumlah data dalam setiap kategori
for suhu in data_temperaturrata:
    if suhu < 26:
        jumlah_data[0] += 1
    elif 26 <= suhu < 27:
        jumlah_data[1] += 1
    elif 27 <= suhu < 28:
        jumlah_data[2] += 1
    elif 28 <= suhu < 29:
        jumlah_data[3] += 1
    elif 29 <= suhu < 30:
        jumlah_data[4] += 1
    else:
        jumlah_data[5] += 1

# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Temperatur maksimum (°C)')
plt.show()

"""kesimpulan : lebih dari 60% suhu yang berada pada range 26-28, dan suhu yang lebih besar dari 30 hanya 2,2 persen"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Temperatur rata-rata (°C)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.bisa kita lihat bahwa nilai p-Value dibawah ambang batas. Jika nilai batas yang kita gunakan adalah 0.05, maka bisa kita simpulkan bahwa kita tidak punya cukup bukti untuk menolak hipotesa null, maka data tidak tersusun secara acak

"""

#distribusi untuk kolom temperature rata-rata
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Temperatur rata-rata (°C)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Temperatur rata-rata (°C)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Temperatur rata-rata (°C)']-
np.mean(df['Temperatur rata-rata (°C)']))/np.std(df['Temperatur rata-rata (°C)'],ddof=1), 'norm')

pVals

f = Fitter(df['Temperatur rata-rata (°C)'], distributions = ['norm','chi','f','t'])
f.fit()
f.summary()

"""kesimpulan distribusi kolom Temperature rata-rata : setelah di uji dengan KS ternyata p-value > 0,05 maka kesimpulannya yaitu terdistribusi normal dan f"""

#kolom Kelembapan rata-rata (%)
df[['Kelembapan rata-rata (%)']]

"""kolom kelembapan  rata-rata (%) berisi data kontinu berarti jenis data nya numerikal. termasuk dalam interval karena memiliki rentang atau ambang batas."""

# Mengakses kolom 'Kelembapan rata-rata (%)'
kolom_kelembapanratarata = df['Kelembapan rata-rata (%)'].values

# Menampilkan isi kolom 'Kelembapan rata-rata (%)'
print(kolom_kelembapanratarata)

#analisis komposisi tiap variabel
data_kelembapanrata = df['Kelembapan rata-rata (%)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['<70', '70-75', '75-80', '80-85', '85-90', '>90']
jumlah_data = [0, 0, 0, 0, 0, 0]

# Menghitung jumlah data dalam setiap kategori
for suhu in data_kelembapanrata:
    if suhu < 70:
        jumlah_data[0] += 1
    elif 70 <= suhu < 75:
        jumlah_data[1] += 1
    elif 75 <= suhu < 80:
        jumlah_data[2] += 1
    elif 80 <= suhu < 85:
        jumlah_data[3] += 1
    elif 85 <= suhu < 90:
        jumlah_data[4] += 1
    else:
        jumlah_data[5] += 1

# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])



# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Kelembapan rata-rata (%) ')
plt.show()

"""kesimpulan : terdapat lebih dari 80% kelembapan rata-rata yang berada diatas 80(%)"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Kelembapan rata-rata (%)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.bisa kita lihat bahwa nilai p-Value dibawah ambang batas. Jika nilai batas yang kita gunakan adalah 0.05, maka bisa kita simpulkan bahwa kita tidak punya cukup bukti untuk menolak hipotesa null, maka data tidak tersusun  secara acak."""

#distribusi untuk kolom kelembapan rata rata
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Kelembapan rata-rata (%)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Kelembapan rata-rata (%)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Kelembapan rata-rata (%)']-
np.mean(df['Kelembapan rata-rata (%)']))/np.std(df['Kelembapan rata-rata (%)'],ddof=1), 'norm')

pVals

f = Fitter(df['Kelembapan rata-rata (%)'], distributions = ['norm','chi','f','t'])
f.fit()
f.summary()

"""kesimpulan distribusi kolom Kelembapan rata-rata : setelah di uji dengan KS ternyata p-value > 0,05 maka kesimpulannya yaitu terdistribusi normal"""

#kolom Curah hujan (mm)
df[['Curah hujan (mm)']]

"""tipe data kolom curah hujan : numerikal karena datanya kontinu dan rasio"""

# Mengakses kolom 'Curah hujan (mm)'
kolom_curahujan = df['Curah hujan (mm)'].values

# Menampilkan isi kolom 'Curah hujan (mm)'
print(kolom_curahujan)

#analisis komposisi tiap variabel
data_curah = df['Curah hujan (mm)']

# Menghitung jumlah data dalam setiap kategori
kategori = ['0.5 - 20', '20 - 50', '50 - 100', '>150']
jumlah_data = [0, 0, 0, 0]


# Menghitung jumlah data dalam setiap kategori
for curah_hujan in data_curah:
    if 0.5 <= curah_hujan <= 20:
        jumlah_data[0] += 1
    elif 20 < curah_hujan <= 50:
        jumlah_data[1] += 1
    elif 50 < curah_hujan <= 100:
        jumlah_data[2] += 1
    else:
        jumlah_data[3] += 1


# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])


#berdasar data yang saya dapat di website bmkg terdapat penggolongan cuaca
'''
0.5 - 20 mm/hari  : Hujan ringan.
 20 - 50 mm/hari  : Hujan sedang.
 50 - 100 mm/hari : Hujan lebat.
100 - 150 mm/hari : Hujan sangat lebat.
'''

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Kelembapan rata-rata (%) (°C)')
plt.show()

"""- 0.5 - 20 mm/hari  : Hujan ringan : 63,7%
- 20 - 50 mm/hari   : Hujan sedang : 11,1%
- 50 - 100 mm/hari  : Hujan lebat : 0,7%
- 100 - 150 mm/hari : Hujan sangat lebat : 24,4%

"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Curah hujan (mm)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.Mengingat bahwa p-value yang dikembalikan tidak lebih kecil dari ambang batas, maka bisa disimpulkan bahwa ‘Kita mempunyai cukup bukti bahwa data ‘Curah hujan (mm)’ dikumpulkan secara acak’.

"""

#distribusi untuk kolom Curah hujan (mm)
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Curah hujan (mm)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Curah hujan (mm)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Curah hujan (mm)']-
np.mean(df['Curah hujan (mm)']))/np.std(df['Curah hujan (mm)'],ddof=1), 'norm')

pVals

f = Fitter(df['Curah hujan (mm)'], distributions = ['norm','chi','f','t'])
f.fit()
f.summary()

"""kesimpulan distribusi kolom Kelembapan rata-rata : setelah di uji dengan KS ternyata p-value < 0,05 maka kesimpulannya yaitu tidak ada distribusi yang cocok atau tidak terdistribusi normal

"""

#kolom Lamanya penyinaran matahari (jam)
df[['Lamanya penyinaran matahari (jam)']]

# Mengakses kolom 'Lamanya penyinaran matahari (jam)'
kolom_penyinaran = df['Lamanya penyinaran matahari (jam)'].values

# Menampilkan isi kolom 'Lamanya penyinaran matahari (jam)'
print(kolom_penyinaran)

"""kolom Lamanya penyinaran matahari (jam) : bentuk data numerikal karena termasuk dalam data kontinu dan rasio karena memiliki nol mutlak"""

#analisis komposisi tiap variabel
kolom_penyinaran = df['Lamanya penyinaran matahari (jam)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['<5', '5-10', '>10']
jumlah_data = [0, 0, 0]

# Menghitung jumlah data dalam setiap kategori
for suhu in kolom_penyinaran:
    if suhu < 5:
        jumlah_data[0] += 1
    elif 5 <= suhu <= 10:
        jumlah_data[1] += 1
    else:
        jumlah_data[2] += 1

# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart penyinaran matahari (jam)')
plt.show()

"""kesimpulan : tidak terdapat perbedaan yang cukup significant lama nya penyinaran matahari < 5 jam dan pada range 5-10 jam"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Lamanya penyinaran matahari (jam)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.Mengingat bahwa p-value yang dikembalikan tidak lebih kecil dari ambang batas, maka bisa disimpulkan bahwa ‘Kita mempunyai cukup bukti bahwa data ‘Lamanya penyinaran matahari (jam) (°C)’ dikumpulkan secara acak’.

"""

#distribusi untuk kolom Lamanya penyinaran matahari (jam)
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Lamanya penyinaran matahari (jam)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Lamanya penyinaran matahari (jam)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Lamanya penyinaran matahari (jam)']-
np.mean(df['Lamanya penyinaran matahari (jam)']))/np.std(df['Lamanya penyinaran matahari (jam)'],ddof=1), 'norm')

pVals

""" Dari nilai statistik Kolmogorov-Smirnov, dapat disimpulkan bahwa data yang diuji terdistribusi normal (p-value > 0.05). Setelah di uji dengan Fitter keempat pvalue diatas 0.05 yang berarti kolom Lamanya penyinaran matahari (jam) terdistribusi normal"""

#kolom Kecepatan angin maksimum (m/s)
df[['Kecepatan angin maksimum (m/s)']]

"""kolom Kecepatan angin maksimum (m/s) berisi data kontinu berarti jenis data nya numerikal. termasuk dalam rasio karena memiliki nol mutlak"""

# Mengakses kolom 'Kecepatan angin maksimum (m/s) '
kolom_kecepatan = df['Kecepatan angin maksimum (m/s)'].values

# Menampilkan isi kolom 'Kecepatan angin maksimum (m/s)'
print(kolom_kecepatan)

#analisis komposisi tiap variabel
data_kecepatan = df['Kecepatan angin maksimum (m/s)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['<3', '3', '4', '5', '6', '>6']
jumlah_data = [0, 0, 0, 0, 0, 0]

# Menghitung jumlah data dalam setiap kategori
for suhu in data_kecepatan:
    if suhu < 3:
        jumlah_data[0] += 1
    elif suhu == 3:
        jumlah_data[1] += 1
    elif suhu == 4:
        jumlah_data[2] += 1
    elif suhu == 5:
        jumlah_data[3] += 1
    elif suhu == 6:
        jumlah_data[4] += 1
    else:
        jumlah_data[5] += 1

# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Kecepatan angin maksimum (m/s)')
plt.show()

"""kesimpulan: kecepatang angin 4 m/s menempati persentase tertinggi 27,4%, sedangkan kecepatann angin >6 m/s menempati urutan terbawah hanya 5,2%"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Kecepatan angin maksimum (m/s)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.Mengingat bahwa p-value yang dikembalikan tidak lebih kecil dari ambang batas, maka bisa disimpulkan bahwa ‘Kita mempunyai cukup bukti bahwa data ‘Kecepatan angin maksimum (m/s)’ dikumpulkan secara acak’.

"""

#distribusi untuk kolom Kecepatan angin maksimum (m/s)
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Kecepatan angin maksimum (m/s)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Kecepatan angin maksimum (m/s)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Kecepatan angin maksimum (m/s)']-
np.mean(df['Kecepatan angin maksimum (m/s)']))/np.std(df['Kecepatan angin maksimum (m/s)'],ddof=1), 'norm')

pVals

f = Fitter(df['Kecepatan angin maksimum (m/s)'], distributions = ['norm','chi','f','t'])
f.fit()
f.summary()

"""kesimpulan distribusi Kecepatan angin maksimum (m/s) : setelah di uji dengan KS ternyata p-value < 0,05 maka tidak ada distribusi yang cocok atau tidak terdistribusi normal"""

#kolom Arah angin saat kecepatan maksimum (°)
df[['Arah angin saat kecepatan maksimum (°)']]

"""kolom Arah angin saat kecepatan maksimum (°)berisi data kontinu berarti jenis data nya numerikal. termasuk dalam interval karena memiliki rentang atau ambang batas."""

# Mengakses kolom 'Arah angin saat kecepatan maksimum (°)'
kolom_arah = df['Arah angin saat kecepatan maksimum (°)'].values

# Menampilkan isi kolom 'Arah angin saat kecepatan maksimum (°)'
print(kolom_arah)

#analisis komposisi tiap variabel
data_arah = df['Arah angin saat kecepatan maksimum (°)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['<90', '90-180', '180-270', '>270']
jumlah_data = [0, 0, 0, 0]

# Menghitung jumlah data dalam setiap kategori
for suhu in data_arah:
    if suhu < 90:
        jumlah_data[0] += 1
    elif 90 <= suhu < 180:
        jumlah_data[1] += 1
    elif 180 <= suhu < 270:
        jumlah_data[2] += 1
    else:
        jumlah_data[3] += 1

# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Arah angin saat kecepatan maksimum (°)')
plt.show()

"""kesimpulan : arah angin >270 memiliki persentase tertinggi yaitu 38,5% dan tidak memiliki perbedaan yang cukup significant dengan persentase >90"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Arah angin saat kecepatan maksimum (°)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.bisa kita lihat bahwa nilai p-Value adalah 0.02. Jika nilai batas yang kita gunakan adalah 0.05, maka bisa kita simpulkan bahwa kita tidak punya cukup bukti untuk menolak hipotesa null, maka data tidak tersusun  secara acak."""

#distribusi untuk kolom Arah angin saat kecepatan maksimum (°)
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Arah angin saat kecepatan maksimum (°)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Arah angin saat kecepatan maksimum (°)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Arah angin saat kecepatan maksimum (°)']-
np.mean(df['Arah angin saat kecepatan maksimum (°)']))/np.std(df['Arah angin saat kecepatan maksimum (°)'],ddof=1), 'norm')

pVals

f = Fitter(df['Arah angin saat kecepatan maksimum (°)'], distributions = ['norm','chi','f','t'])
f.fit()
f.summary()

"""kesimpulan distribusi Arah angin saat kecepatan maksimum (°) : setelah di uji dengan KS ternyata p-value < 0,05 maka tidak ada distribusi yang cocok atau tidak terdistribusi normal"""

#kolom Kecepatan angin rata-rata (m/s)
df[['Kecepatan angin rata-rata (m/s)']]

"""kolom Kecepatan angin rata-rata (m/s) berisi data kontinu berarti jenis data nya numerikal. termasuk dalam interval karena memiliki rentang atau ambang batas."""

# Mengakses kolom 'Kecepatan angin rata-rata (m/s)'
kolom_temperaturmaksimum = df['Kecepatan angin rata-rata (m/s)'].values

# Menampilkan isi kolom 'Kecepatan angin rata-rata (m/s)'
print(kolom_temperaturmaksimum)

#analisis komposisi tiap variabel
data_kecepatanangin = df['Kecepatan angin rata-rata (m/s)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['1', '2', '3']
jumlah_data = [0, 0, 0]

# Menghitung jumlah data dalam setiap kategori
for suhu in data_kecepatanangin:
    if suhu == 1:
        jumlah_data[0] += 1
    elif suhu == 2:
        jumlah_data[1] += 1
    elif suhu == 3:
        jumlah_data[2] += 1
    else:
        jumlah_data[3] += 1


# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Kecepatan angin rata-rata (m/s)')
plt.show()

"""kesimpulan : kecepatan angin 2 m/s memiliki persentase tertinggi dan melebihi 50%"""

#memeriksa apakah variabel tersebut tersebar secara acak?
runstest_1samp(df['Kecepatan angin rata-rata (m/s)'],cutoff='median',correction=True)

"""Hipotesa null pada runs test adalah data dikumpulkan secara random. Runs test pada statsmodels akan mengembalikan dua buah nilai, nilai z-test dan p-value. Kita akan menggunakan ambang batas 0.05.Mengingat bahwa p-value yang dikembalikan tidak lebih kecil dari ambang batas, maka bisa disimpulkan bahwa ‘Kita mempunyai cukup bukti bahwa data Kecepatan angin rata-rata (m/s)’ dikumpulkan secara acak’.

"""

#distribusi untuk kolom Kecepatan angin rata-rata (m/s)
pVals = pd.DataFrame(index = ['Statistical Value/Score', 'p-Value'])
pVals['Omnibus'] = sp.normaltest(df['Kecepatan angin rata-rata (m/s)'])
# Shapiro-Wilk test
pVals['Shapiro-Wilk'] = sp.shapiro(df['Kecepatan angin rata-rata (m/s)'])
#Kolmogorov-Smirnov

pVals['Kolmogorov-Smirnov'] = sp.kstest((df['Kecepatan angin rata-rata (m/s)']-
np.mean(df['Kecepatan angin rata-rata (m/s)']))/np.std(df['Kecepatan angin rata-rata (m/s)'],ddof=1), 'norm')

pVals

ff = Fitter(df['Kecepatan angin rata-rata (m/s)'], distributions = ['norm','chi','f','t'])
f.fit()
f.summary()

"""Dari nilai statistik Kolmogorov-Smirnov, dapat disimpulkan bahwa data yang diuji terdistribusi normal (p-value < 0.05). maka kesimpulannya tidak terdistribusi secara normal"""

#kolom Arah angin terbanyak (°)
df[['Arah angin terbanyak (°)']]

# Mengakses kolom 'Arah angin terbanyak (°)'
kolom_temperaturmaksimum = df['Arah angin terbanyak (°)'].values

# Menampilkan isi kolom 'Arah angin terbanyak (°)'
print(kolom_temperaturmaksimum)

df['Arah angin terbanyak (°)'].unique()

"""tipe data kolom Arah angin terbanyak (°) : karena merupakan data diskrit/kategorikal dan merupakan nomina"""

#analisis komposisi tiap variabel
data_arah = df['Arah angin terbanyak (°)']

# Mengelompokkan data suhu ke dalam kategori
kategori = ['NW', 'W', 'C', 'SW', 'E', 'NE', 'S', 'N']
jumlah_data = [0, 0, 0, 0, 0, 0, 0, 0]

data_arah = ['NW', 'W', 'C', 'SW', 'E', 'NE', 'S', 'N', 'W', 'NW', 'C']

# Menghitung jumlah data dalam setiap kategori
for suhu in data_arah:
    if suhu == 'NW':
        jumlah_data[0] += 1
    elif suhu == 'W':
        jumlah_data[1] += 1
    elif suhu == 'C':
        jumlah_data[2] += 1
    elif suhu == 'SW':
        jumlah_data[3] += 1
    elif suhu == 'E':
        jumlah_data[4] += 1
    elif suhu == 'NE':
        jumlah_data[5] += 1
    elif suhu == 'S':
        jumlah_data[6] += 1
    elif suhu == 'N':
        jumlah_data[7] += 1



# Menampilkan jumlah data dalam setiap kategori
for i in range(len(kategori)):
    print(kategori[i] + ':', jumlah_data[i])

# Membuat pie chart
plt.pie(jumlah_data, labels=kategori, autopct='%1.1f%%')

# Menampilkan pie chart
plt.axis('equal')
plt.title('Pie Chart Arah angin terbanyak (°)')
plt.show()

"""kesimpulan : persentase 'NW', 'W','C' mempunyai nilai yang sama yaitu 18,2%, sedangkan yang lainnya memiliki persentase yang sama yaitu 9,1%"""

#memeriksa apakah variabel tersebut tersebar secara acak?
#karena datanya diskrit maka tidak bisa melihat persebaran data tersebut

#distribusi kolom Arah angin terbanyak (°)
#karena jenis datanya bukan data kontinu melainkan diskrit maka tidak bisa disitribusikan

"""**Kesimpulan** :
**Univariate Analysis
**
- untuk kolom "Temperatur minimum (°C)", "Temperatur maksimum (°C)", "Temperatur rata-rata (°C)", "Kelembapan rata-rata (%)", "Lamanya penyinaran matahari (jam)",terdistribusi normal karena p-value lebih dari 0,05.
- untuk kolom "Curah hujan (mm)", "Kecepatan angin maksimum (m/s)", " Arah angin saat kecepatan maksimum (°)", "Kecepatan angin rata-rata (m/s)", tidak terdistribusi normal karena p value kurang dari 0,05.
- untuk kolom "Arah angin terbanyak (°)" tidak bisa didistribusikan karena merupakan data diskrit.
- untuk kolom "Temperatur minimum (°C)", "Temperatur maksimum (°C)", "Temperatur rata-rata (°C)", "Kelembapan rata-rata (%)", "Arah angin saat kecepatan maksimum (°)" merupakan variabel yang tersebar secara tidak acak karena hasil runstest menunjukkan bahwa p value lebih kecil dari ambang batas 0,05 , maka bisa disimpulkan kita tidak mempunyai cukup bukti untuk menunjukkan bahwa kolom-kolom tersebut secara acak.
- untuk kolom "Curah hujan (mm)", "Kecepatan angin maksimum (m/s)", " Arah angin saat kecepatan maksimum (°)", "Kecepatan angin rata-rata (m/s)" merupakan variabel yang tersebar secara  acak karena hasil runstest menunjukkan bahwa p value lebih besar dari ambang batas 0,05 , maka bisa disimpulkan kita  mempunyai cukup bukti untuk menunjukkan bahwa kolom-kolom tersebut secara acak.
- untuk kolom "Arah angin terbanyak (°)" tidak bisa ditentukan apakah tersebar secara acak atau tidak karena bentuk datanya diskrit.

### Penentuan Variabel  (Muhammad Putra Harifin Pane) (221401072)
Jelaskan siapa saja yang merupakan variabel independen dan kolom mana yang menjadi variabel dependen sesuai topik anda!

Variabel independen:

- Temperatur minimum (°C)
- Temperatur maksimum (°C)
- Kelembapan rata-rata (%)
- Curah hujan (mm)
- Lamanya penyinaran matahari (jam)
- Kecepatan angin maksimum (m/s)
- Arah angin saat kecepatan maksimum (°)
. Variabel independen adalah variabel yang dianggap sebagai faktor atau penyebab yang mempengaruhi variabel lain dalam suatu analisis atau model. Dalam hal  ini, variabel independen dapat digunakan untuk memprediksi atau menjelaskan nilai variabel dependen. Dalam hal ini, variabel independen dapat digunakan sebagai input dalam model prediksi cuaca atau analisis iklim. Misalnya, kita dapat menggunakan temperatur maksimum, curah hujan, atau kelembapan rata-rata sebagai variabel independen untuk memprediksi lamanya penyinaran matahari.

Variabel dependen:

- Temperatur rata-rata (°C)
- Kecepatan angin rata-rata (m/s)
- Arah angin terbanyak (°)
.
Variabel dependen adalah variabel yang dipengaruhi oleh atau bergantung pada variabel independen. Dalam konteks ini, variabel dependen adalah variabel yang ingin kita pahami atau prediksi dalam suatu analisis. Misalnya, dalam analisis cuaca, temperatur rata-rata dapat menjadi variabel dependen yang ingin kita prediksi berdasarkan variabel independen seperti temperatur maksimum, curah hujan, dan kelembapan rata-rata.

### Bivariate Analysis - (Muhammad Rico Prasetio) (221401114)

- Lakukan uji Homoskedastisitas
- Cek Korelasi Numerikal dan Kategorikal
- Simpulkan apakah ada hubungan linearitas!

Disini saya akan melakukan uji Homoskedastisitas
"""

#Membuat sebuah tabel kosong lalu bakalan di tes p value levene's test untuk 2 pasang kolom data kita
df_Homoskedastis = pd.DataFrame(index = list(df.columns),
                          columns = list(df.columns))

# setelah itu kita hapus tanggal dan arah angin
df_Homoskedastis.drop(index = ['Tanggal', 'Arah angin terbanyak (°)'],
                      columns = ['Tanggal', 'Arah angin terbanyak (°)'],
                      inplace = True)

df_Homoskedastis

for i in df_Homoskedastis.columns:
  for j in df_Homoskedastis.columns:
    df_Homoskedastis.loc[i,j] = sp.levene(df[i], df[j]).pvalue

df_Homoskedastis

"""Karena p-value yang lebih besar dari 0.05, maka itu homoskedastis dan
p-value yang lebih kecil dari 0.05 maka itu tidak homoskedastis

Disini saya akan Mengecek Korelasi Numerikal

Disini, bisa kita lihat, ada beberapa kolom yang bertipe numerik dan beberapa yang tidak. Mari kita pecah menjadi 2 tabel, df_numerik dan df_kategorikal. tetapi disini saya hanya korelasi yang numerik
"""

df_numerik = df[['Temperatur minimum (°C)', 'Temperatur maksimum (°C)',
                 'Temperatur rata-rata (°C)', 'Kelembapan rata-rata (%)',
                 'Curah hujan (mm)', 'Lamanya penyinaran matahari (jam)',
                 'Kecepatan angin maksimum (m/s)', 'Arah angin saat kecepatan maksimum (°)',
                 'Kecepatan angin rata-rata (m/s)']]
df_kategori = df[['Arah angin terbanyak (°)']]

#Menampilkan tabel numerik
df_numerik

df_numerik.corr()

# parameter cmap untuk palet warna, annot untuk ditulis koefisien
# dan fmt untuk format angka. .3f berarti 3 angka dibelakang koma
sns.heatmap(data = df.corr(method = 'pearson', numeric_only = True), cmap = 'flare', annot = True, fmt = ".3f")
plt.show()

"""Dari sini, kita bisa melihat bahwa ada hubungan linearitas dari data.

####Hasil Analisis

**Kesimpulan Bivariate analysis**

**Kesimpulan Korelasi :**  

*   "Temperatur Minimun" berkorelasi sedang, positif, dan linear dengan Variabel Target
*   "Temperatur Maksimum" berkorelasi kuat, positif, dan linear dengan Variabel Target

*   "Temperatur Maksimum" berkorelasi kuat, positif, dan linear dengan Variabel Target
*   "Lamanya penyinaran matahari (jam)" berkorelasi lemah, positif dengan Variabel Target
*   Sedangkan "Kecepatan angin maksimum (m/s)" tidak memiliki korelasi pada Variabel Target

**Kesimpulan Homoskedastis :**

* "Temperatur Minimum" Homosdekastis dengan "Temperatur rata-rata"

* "Temperatur Maksimum" Homosdekastis dengan "Kecepatan Angin Maksimum"

* "Temperatur rata-rata" Homosdekastis dengan "Temperatur Minimum" dan "Kecepatan Angin Maksimal"
* Sedangkan "Kelembapan rata-rata", "Curah Hujan", "Lamanya Penyinaran Matahari", "Kecepatan Angin Maksimum", "Arah angin saat Kecepatan Maksimum", "Kecepatan Angin rata-rata" tidak Homoskedastis dengan yang lain

### Uji Hipotesa - (Rafhael Remco Marchelino Sumbayak - 221401121)

- Pertanyaan apa yang ingin kalian jawab
- Hipotesa Null
- Uji Statistik yang kalian gunakan
- Kenapa kalian memilih uji tersebut
"""

# Gunakan uji yang sesuai dengan pertanyaan dan data kalian!

# melihat datasetnya
df

"""Pertanyaan yang muncul:

Apakah terdapat korelasi signifikan antara temperatur rata-rata dan kecepatan angin rata-rata?

Apakah terdapat korelasi signifikan antara curah hujan dan kecepatan angin rata-rata?

Apakah terdapat korelasi signifikan antara kecepatan angin maksimum dan kecepatan angin rata-rata?

apakah terdapat perbedaan yang signifikan antara Temperatur minimum (°C), Temperatur maksimum (°C), Kelembapan rata-rata (%), Curah hujan (mm), Lamanya penyinaran matahari (jam), dan Kecepatan angin maksimum (m/s)?

Uji statistik yang dilakukan menggunakan Pearson. Pearson digunakan karena variabel berbentuk kontinu.

Untuk menghitung koefisien korelasi Pearson antara variabel digunakan 'sp.pearsonr()' dalam DataFrame df. Hasil korelasi disimpan dalam variabel corr.

P_value dihitung menggunakan fungsi 'sp.pearsonr()'. P-value merupakan ukuran signifikansi korelasi antara kedua variabel tersebut.
"""

# menghitung korelasi signifikan antara Temperatur rata-rata dan Kecepatan angin rata-rata
corr, p_value = sp.pearsonr(df['Temperatur rata-rata (°C)'], df['Kecepatan angin rata-rata (m/s)'])
print("Koefisien Korelasi Pearson:", corr)
print("p-value:",p_value)
if p_value < 0.05:
    print("Ada korelasi signifikan antara Temperatur rata-rata dan Kecepatan angin rata-rata.")
else:
    print("Tidak ada korelasi signifikan antara Temperatur rata-rata dan Kecepatan angin rata-rata")

"""Karena nilai p-value lebih besar dari 0.05. Maka, hipotesa nol diterima dan dapat disimpulkan Tidak ada korelasi signifikan antara Temperatur rata-rata dan Kecepatan angin rata-rata"""

# menghitung korelasi signifikan antara Temperatur rata-rata dan Kelembapan rata-rata
corr, p_value = sp.pearsonr(df['Curah hujan (mm)'], df['Kecepatan angin rata-rata (m/s)'])
print("Koefisien Korelasi Pearson:", corr)
print("p-value:",p_value)
if p_value < 0.05:
    print("Ada korelasi signifikan antara Temperatur rata-rata dan Kelembapan rata-rata.")
else:
    print("Tidak ada korelasi signifikan antara Temperatur rata-rata dan Kelembapan rata-rata.")

"""Karena nilai p-value lebih besar dari 0.05, Maka hipotesa nol diterima dan dapat disimpulkan Tidak ada korelasi signifikan antara Temperatur rata-rata dan Kelembapan rata-rata."""

# menghitung korelasi signifikan antara Kecepatan angin maksimum dan Kecepatan angin rata-rata
corr, p_value = sp.pearsonr(df['Kecepatan angin maksimum (m/s)'], df['Kecepatan angin rata-rata (m/s)'])
print("Koefisien Korelasi Pearson:", corr)
print("p-value:",p_value)

if p_value < 0.05:
    print("Ada korelasi signifikan antara Kecepatan angin maksimum dan Kecepatan angin rata-rata.")
else:
    print("Tidak ada korelasi signifikan antara Kecepatan angin maksimum dan Kecepatan angin rata-rata.")

"""Karena nilai p-value lebih kecil dari 0.05, Maka hipotesa nol ditolak dan dapat disimpulkan ada korelasi signifikan antara Kecepatan angin maksimum dan Kecepatan angin rata-rata.

---

Temperatur minimum (°C), Temperatur maksimum (°C), Kelembapan,rata-rata (%), Curah hujan (mm), Lamanya penyinaran matahari (jam), Kecepatan angin maksimum (m/s) merupakan variabel numerikal yang independen yang sebgian variabel tidak terdistribusi normal. Maka akan menggunakan kruskal-wallis

Hipotesis Nol (H0): Tidak ada perbedaan yang signifikan antara Temperatur minimum (°C), Temperatur maksimum (°C), Kelembapan rata-rata (%), Curah hujan (mm), Lamanya penyinaran matahari (jam), dan Kecepatan angin maksimum (m/s).

Hipotesis Alternatif (H1): Terdapat perbedaan yang signifikan antara setidaknya satu pasangan variabel Temperatur minimum (°C), Temperatur maksimum (°C), Kelembapan rata-rata (%), Curah hujan (mm), Lamanya penyinaran matahari (jam), dan Kecepatan angin maksimum (m/s).
"""

kolom_a = df['Temperatur minimum (°C)']
kolom_b = df['Temperatur maksimum (°C)']
kolom_c = df['Kelembapan rata-rata (%)']
kolom_d = df['Curah hujan (mm)']
kolom_e = df['Lamanya penyinaran matahari (jam)']
kolom_f = df['Kecepatan angin maksimum (m/s)']

result = stats.kruskal(kolom_a, kolom_b, kolom_c, kolom_d, kolom_e, kolom_f)
print(result)

"""Diperoleh nilai statistik = 673.342788462539 dan nilai p = 2.848248677458712e-143.

Karena nilai p-value < 0.05 maka H0 ditolak dan dapat ditarik kesimpulan bahwa  ada perbedaan yang siginifikan diantara variabel-variabel tersebut.

## Model Creation - (RIZKY KARINA BERUTU - 221401124)

Bangun model kalian! Pilih variabel independen dan dependen sesuai dengan analisis kalian sebelumnya!

Variabel independen :

Variabel dependen :
"""

#Memanggil kembali dataset
df

"""###**Melihat Keterkaitan Korelasi antara Variabel Prediktor dengan Variabel Target**

Cara Pertama : **Metode Grafik**
"""

#Prediksi Korelasi menggunakan grafik

#Memprediksi Korelasi antar semua kolom
#Prediksi Korelasi antara 'Temperatur minimum (°C)', 'Temperatur maksimum (°C)', 'Kecepatan angin rata-rata (m/s)', 'Curah hujan (mm)', 'Lamanya penyinaran matahari (jam)',	'Kecepatan angin maksimum (m/s)',	'Arah angin saat kecepatan maksimum (°)' Dengan 'Temperatur rata-rata (°C)', 'Kecepatan angin rata-rata (m/s)', dan 'Arah angin terbanyak (°)'
sns.pairplot(df, x_vars=['Temperatur minimum (°C)', 'Temperatur maksimum (°C)', 'Kecepatan angin rata-rata (m/s)', 'Curah hujan (mm)', 'Lamanya penyinaran matahari (jam)',	'Kecepatan angin maksimum (m/s)',	'Arah angin saat kecepatan maksimum (°)'], y_vars=['Temperatur rata-rata (°C)', 'Kecepatan angin rata-rata (m/s)', 'Arah angin terbanyak (°)'], height=4, aspect=1, kind='scatter')
plt.show()

"""### **Pemisahan prediksi agar tidak bingung melihatnya**"""

#Prediksi Korelasi antara 'Temperatur minimum (°C)', 'Temperatur maksimum (°C)', 'Lamanya penyinaran matahari (jam)', 'Kecepatan angin maksimum (m/s)' dengan 'Temperatur rata-rata (°C)'
sns.pairplot(df, x_vars=['Temperatur minimum (°C)', 'Temperatur maksimum (°C)', 'Lamanya penyinaran matahari (jam)', 'Kecepatan angin maksimum (m/s)'], y_vars='Temperatur rata-rata (°C)', height=4, aspect=1, kind='scatter')
plt.show()

"""**Kesimpulan:**  

*   "Temperatur Minimun" berkorelasi sedang, positif, dan linear dengan Variabel Target
*   "Temperatur Maksimum" berkorelasi kuat, positif, dan linear dengan Variabel Target

*   "Temperatur Maksimum" berkorelasi kuat, positif, dan linear dengan Variabel Target
*   "Lamanya penyinaran matahari (jam)" berkorelasi lemah, positif dengan Variabel Target
*   Sedangkan "Kecepatan angin maksimum (m/s)" tidak memiliki korelasi pada Variabel Target

"""

#Prediksi Korelasi 'Temperatur maksimum (°C)', 'Lamanya penyinaran matahari (jam)',	'Kecepatan angin maksimum (m/s)' dengan 'Kecepatan angin rata-rata (m/s)'
sns.pairplot(df, x_vars=['Temperatur maksimum (°C)', 'Lamanya penyinaran matahari (jam)',	'Kecepatan angin maksimum (m/s)'], y_vars='Kecepatan angin rata-rata (m/s)', height=4, aspect=1, kind='scatter')
plt.show()

"""**Kesimpulan:**


Ketiga variabel prediktor ('Temperatur maksimum (°C)', 'Lamanya penyinaran matahari (jam)', dan 'Kecepatan angin maksimum (m/s)' tidak terlihat adanya korelasi dengan Variabel Target)

Cara Kedua: **Korelasi Heatmap/Matriks**
"""

#membuat korelasi heatmap
sns.heatmap(data = df.corr(), annot = True, fmt = ".2f", cmap = "crest")
plt.show()

"""**Kesimpulan Pertama:** Koefisien Korelasi **Temperatur minimum (°C)** dengan **Temperatur rata-rata (°C)** adalah 0.57, koefisien korelasi antara **Temperatur maksimum (°C)** dengan **Temperatur rata-rata (°C)** adalah 0.84, koefisien korelasi antara **Lamanya penyinaran matahari (jam)** dengan **Temperatur rata-rata (°C)** adalah 0.42, dan koefisien korelasi antara **Kecepatan angin maksimum (m/s)** dengan **Temperatur rata-rata (°C)** adalah 0.17.

-

**Kesimpulan Kedua:** Koefisien Korelasi **Temperatur maksimum (°C)** dengan **Kecepatan angin rata-rata (m/s)** adalah 0.08, koefisien korelasi antara **Lamanya penyinaran matahari (jam) (°C)** dengan **Kecepatan angin rata-rata (m/s)** adalah 0.04, dan koefisien korelasi antara **Kecepatan angin maksimum (m/s)** dengan **Kecepatan angin rata-rata (m/s)** adalah 0.59.

-

**Kesimpulan Ketiga:** Korelasi koefisien semua kolom dengan **Arah angin terbanyak (°)** tidak ada, karena data Arah angin terbanyak ini merupakan Kategorikal, jadi tidak perlu dibuatkan korelasi.

## **Distribusi Variabel Target dan Prediktor**

Cara Pertama: **Melihat Grafik (Histogram)**
"""

#Membuat grafik histrogram pada data 'Temperatur rata-rata (°C)'
sns.histplot(df['Temperatur rata-rata (°C)']);

"""**Kesimpulan:** Jika menurut grafik histogram di atas, dapat dilihat bahwa tidak adanya penyimpangan yang telalu signifikan karena bentuk dari histogramnya menyerupai bentuk lonceng/bell pada Variabel Target. Dan dapat disimpulkan bahwa variabel Target ini terdistribusi Normal.

**Kesimpulan: Distribusi Normal (Kurva Lonceng/Bell Curve)**
"""

#Membuat grafik histrogram pada data 'Kecepatan angin rata-rata (m/s)'
sns.histplot(df['Kecepatan angin rata-rata (m/s)']);

"""**Kesimpulan:** Jika menurut grafik histogram di atas, dapat dilihat bahwa adanya penyimpangan yang telalu signifikan pada bentuk histogram Variabel Target. Grafik tersebut tidak membentuk apa apa dari variabel target. Jadi, dapat disimpulkan bahwa variabel Target ini tidak terdistribusi Normal.

**Kesimpulan: Tidak Terdistribusi Normal (Kurva tidak membentuk apa-apa)**

Cara Kedua: **PP-Plot**
"""

#Cek Pp-Plot dari Variabel Target ('Temperatur rata-rata (°C)')
sp.probplot(df['Temperatur rata-rata (°C)'], dist="norm", plot=plt)
plt.show()

"""Dari Grafik Pp-Plot di atas, dapat dilihat bahwa hampir keseluruhan data terdistribusi sesuai dengan garis probability, dengan beberapa menyimpang dari garis referensi tersebut. Titik yang berada pada garis merah menunjukkan bahwa sampel data tersebut sesuai dengan distribusi
Normal.

**Kesimpulan : Distribusi Normal (Distribusi tidak melenceng signifikan)**
"""

#Cek Pp-Plot Variabel Target ('Kecepatan angin rata-rata (m/s)')
sp.probplot(df['Kecepatan angin rata-rata (m/s)'], dist="norm", plot=plt)
plt.show()

"""Dari Grafik Pp-Plot diatas, dilihat bahwa hampir keseluruhan data ridak terdistribusi sesuai dengan garis probability, hampir seluruh data menyimpang dari garis referensi tersebut.

**Kesimpulan : Tidak Terdistribusi secara Normal (Distribusi melenceng signifikan)**

Tidak mengecek Pp-Plot dari Variabel **('Arag angin terbanyak')** karena variabel tersebut merupakan kategorikal, jadi tidak perlu dibuat distribusinya.

Cara Ketiga : **Uji Statistik**

Ada 135 data, maka menggunakan kolmogorov-smirnof (ks).
"""

sp.kstest((df['Temperatur minimum (°C)']-np.mean(df['Temperatur minimum (°C)']))/np.std(df['Temperatur minimum (°C)'],ddof=1), 'norm')

sp.kstest((df['Temperatur maksimum (°C)']-np.mean(df['Temperatur maksimum (°C)']))/np.std(df['Temperatur maksimum (°C)'],ddof=1), 'norm')

sp.kstest((df['Lamanya penyinaran matahari (jam)']-np.mean(df['Lamanya penyinaran matahari (jam)']))/np.std(df['Lamanya penyinaran matahari (jam)'],ddof=1), 'norm')

sp.kstest((df['Kecepatan angin maksimum (m/s)']-np.mean(df['Kecepatan angin maksimum (m/s)']))/np.std(df['Kecepatan angin maksimum (m/s)'],ddof=1), 'norm')

sp.kstest((df['Temperatur rata-rata (°C)']-np.mean(df['Temperatur rata-rata (°C)']))/np.std(df['Temperatur rata-rata (°C)'],ddof=1), 'norm')

sp.kstest((df['Kecepatan angin rata-rata (m/s)']-np.mean(df['Kecepatan angin rata-rata (m/s)']))/np.std(df['Kecepatan angin rata-rata (m/s)'],ddof=1), 'norm')

"""Hampir semua p-value untuk variabel independen dan dependen lebih besar dari 0.05. Sehingga hampir semua variabel tersebut terdistribusi normal. Namun, pada variabel 'Kecepatan angin rata-rata (m/s)' memiliki p-value yang sangat jauh dari 0.05, jadi variabel ini tidak terdistribusi secara normal.

**Kesimpulan : Distribusi Normal untuk semua variabel yang diuji, kecuali variabel (Kecepatan angin rata-rata (m/s))**
"""

test = Fitter(df['Temperatur rata-rata (°C)'], distributions = ['norm'])
test.fit()
test.summary()

"""Distribusi dari variabel 'Temperatur rata-rata (°C)' adalah normal, karena membentuk lonceng/bell."""

test = Fitter(df['Kecepatan angin rata-rata (m/s)'], distributions = ['norm'])
test.fit()
test.summary()

"""Variabel 'Kecepatan angin rata-rata (m/s)' tidak terdistribusi secara normal.

## Model Evaluation (RIZKY KARINA BERUTU - 221401124)

Evaluasi hasil model kalian! Lakukan prediksi, lalu gunakan sebuah pengukuran (baik RMSE, R-squared, dan Adjusted R-squared) untuk mengukur akurasi model kalian! Jangan lupa untuk menginterpretasi hasil F-test!
"""

df

"""Disini, menggunakan library Statsmodels. Kita akan menggunakan metode OLS, atau Ordinary Least Square."""

# Define the independent variables (X) and the dependent variable (y)
X = df[['Temperatur minimum (°C)', 'Temperatur maksimum (°C)', 'Lamanya penyinaran matahari (jam)', 'Kecepatan angin maksimum (m/s)']]
y = df['Temperatur rata-rata (°C)']

# Add a constant column to the independent variables
X = sm.add_constant(X)

# Fit the regression model
model = sm.OLS(y, X).fit()

print(model.summary())

"""Dari hasil tes tersebut terdapat komponen penting yang muncul, yaitu:


1.   Koefisien constant **(β0)** = **3.3961**
2.   Temperatur minimum (°C) **(β1)** = **0.3797**
3.   Temperatur maksimum (°C) **(β2)** = **0.4463**
4.   Lamanya penyinaran matahari (jam) **(β3)** = **0.0558**
5.   Kecepatan angin maksimum (m/s) **(β4)** = **0.0169**

Sehingga kita bisa menentukan persamaan regresi berganda menjadi:

**Temperatur rata-rata (°C)  = 3.3961 + 0.3797(Temperatur minimum (°C)) + 0.4463(Temperatur maksimum (°C)) + 0.0558(Lamanya penyinaran matahari (jam)) + 0.0169(Kecepatan angin maksimum (m/s))**

Dari persamaan yang diperoleh di atas untuk Model Regresi Linier Berganda, dapat dilihat bahwa **nilai konstan sebesar 3,3961**, yang menunjukkan bahwa jika kita mempertahankan Temperatur rata-rata yang tersebut tanpa adanya tambahan dari variabel pendukung lainnya seperti Temperatur minimum, Temperatur maksimum, Lamanya penyinaran matahari, dan Kecepatan angin maksimum sebagai 0, estimasi Temperatur rata-rata akan menjadi 3,3961 dan peningkatan dalam suhu yang ditambahkan oleh Temperatur minimum akan meningkat sebesar 0,3797, juga ditambahkan oleh Temperatur maksimum yang akan meningkat sebesar 0,4463, serta suhu akan meningkat jika Lamanya penyinaran matahari ditambahkan sebesar 0,0558, dan Temperatur rata-rata akan meningkat jika ditambahkan dengan Kecepatan anging maksimum sebesar 0,0169.

Dari hasil tes diperoleh **nilai Adj. R-Squared sebesar 0,815**, yang mana hasil tes tersebut memberikan bahwa nilai tersebut mendekati 1 sehingga dapat dikatakan model memiliki kecocokan yang baik.

## **Multikolinearitas**
"""

# Memanggil data
df

"""Bisa dilihat bahwa variabel independen adalah Temperatur minimum, Temperatur maksimum, Kelembapan rata-rata, Curah hujan, Lamanya penyinaran matahari, Kecepatan angin maksimum, dan Arah angin saat kecepatan maksimum. Mari kita lihat apakah ada korelasi antara variabel satu  dengan variabel lain.

"""

# Memecah data
df_Independen = df[['Temperatur minimum (°C)',	'Temperatur maksimum (°C)',	'Kelembapan rata-rata (%)',	'Curah hujan (mm)',	'Lamanya penyinaran matahari (jam)',	'Kecepatan angin maksimum (m/s)',	'Arah angin saat kecepatan maksimum (°)']]

# Kita gunakan code yang mirip dengan yang diatas
sns.heatmap(df_Independen.corr(), annot = True, fmt = ".2f", cmap = "crest")
plt.show()

"""Dalam mendeteksi kolinearitas dengan menggunakan heatmap/matriks, anjuran yang digunakan adalah melihat **apakah ada variabel independen yang berkorelasi satu sama lain dengan koefisien setidaknya 0.8**. Disini, bisa dilihat bahwa tidak ada yang bernilai >= 0.8, maka kemungkinan besar tidak ada multikolinearitas.

**Kesimpulan: Tidak ada multikolinearitas**

## **VIF**

VIF menentukan kekuatan korelasi antara variabel independen. **Hal ini diprediksi
dengan mengambil sebuah variabel dan meregresikannya terhadap setiap variabel
lainnya** atau Nilai VIF dari sebuah variabel independen menunjukkan seberapa baik variabel tersebut dijelaskan oleh variabel independen lainnya.
"""

def calc_vif(X):

    #Menghitung VIF
    vif = pd.DataFrame()
    vif["variables"] = X.columns
    vif["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]

    return(vif)

# Menghitung VIF
X = df_numerik.iloc[:,:]
calc_vif(X)

"""- VIF dimulai dari 1 dan tidak memiliki batas atas

- VIF = 1, tidak ada korelasi antara variabel independen dengan variabel lainnya

- VIF melebihi 5 atau 10 mengindikasikan adanya multikolinieritas yang tinggi antara variabel independen dengan variabel lainnya

**Kesimpulan:**

Nilai VIF dari sembilan variabel 7 variabel yang memiliki nilai **VIF >= 5.** Dua variabel lainnya memiliki nilai **VIF < 5**, yaitu 'Curah Hujan' yang memiliki nilai VIF sebesar **1.725089** dan 'Arah angin saat kecepatan maksimum' yang memiliki nilai VIF sebesar **3.677428**. Ini berarti kedua variabel tersebut mengindikasikan bahwa **tidak adanya multikolinieritas yang tinggi**. Sedangkan 7 variabel lainnya menyatakan sebaliknya.

## **Heteroskedastisitas**

**Heteroskedastisitas adalah istilah statistik dan didefinisikan sebagai
penyebaran residual yang tidak merata.**

Uji Breusch-Pagan adalah cara untuk memeriksa apakah ada heteroskedastisitas dalam analisis regresi. Uji Breusch-Pagan
mengikuti hipotesis di bawah ini:

➢ **Hipotesis nol (H0)**: Menandakan bahwa data Homoskedastisitas.

➢ **Hipotesis alternatif: (Ha)**: Menandakan bahwa data tidak Homoskedastisitas (yaitu data heteroskedastisitas).
"""

# Breusch-Pagan test
names = ['Lagrange multiplier statistic', 'p-value',
         'f-value', 'f p-value']

# Mendapatkan hasil
test_result = sms.het_breuschpagan(model.resid, model.model.exog)

lzip(names, test_result)

"""**Kesimpulan:**

Nilai p-value pada hasil adalah 0,483. Karena nilai p-value lebih besar dari 0,05, maka tidak dapat menolak hipotesa null. **Oleh karena itu, tidak ada heteroskedastisitas dalam
model regresi ini.**

## **F-Test**

**F-Test memiliki hipotesa null bahwa tidak ada hubungan antara 1, atau sekumpulan variabel independen, dengan sebuah variabel dependen.**

Dengan kata lain, hipotesa null disini adalah bahwa **koefisien model kita semuanya 0.**
"""

# Memanggil model summary
print(model.summary())

"""Bisa kita lihat, bahwa hasil Prob (F-statistic) adalah sangat kecil, yaitu 1.63e-47 (disekitar 0.0000).

**Kesimpulan** :
**Ada hubungan** antara variabel independen dengan variabel dependen.

**KESIMPULAN:** Dengan hasil test tersebut, didapat bahwa nilai Adj. R-squared adalah **0.815**, yang mana angka tersebut sudah baik karena nilai tersebut mendekati angka 1, sehingga dapat dikatakan model ini memiliki kecocokan yang baik.
"""